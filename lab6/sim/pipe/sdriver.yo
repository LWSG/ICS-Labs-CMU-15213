                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4f004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f64804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # 0. 优化原则
                            | #	0.1 性能计分按照数组大小从1～64平均计算CPE，因而有两个优化方向：
                            | #		0.1.1 降低每次拷贝数据的操作[L]
                            | #		0.1.2 降低循环以外的常数次操作[C](经过测试，最少的常数次操作是[C0]10次,即直接ret的操作数)
                            | 
                            | #	0.2 Average CPE=\Sigma( L + C / n)= L + 0.075 * C = L + 0.075 * Cf + 0.75, 因而 L 必须降低到 6.75 以下，考虑到函数中的常数操作[Cf]的影响以及[L]的计算公式，因而
                            | #		0.2.1 L应当控制在5 ～ 6
                            | #		0.2.2 Cf不应当超过30
                            | #
                            | # 1. 循环展开 [-L, +Cf, +size]
                            | #	循环展开能有效降低无用的addq，理论上展开的越多性能越好，然而循环展开会增加边界判断的开销，并且增加文件大小
                            | #	考虑展开 n 层循环, L = 6 + 3/n，由 0.2.1, n>=3, 以下是相对性能
                            | #	n	CPE
                            | #	4	9.55
                            | #	8	8.75
                            | #	16	9.23
                            | #	n = 16 时 文件大小已经几乎超过 1000b 没有进一步的优化空间,而Cf带来的损耗已经超过了循环展开的收益
                            | #	因而考虑n = 8 ～ 13的循环展开
                            | # 2. 消除 nop [-L]
                            | # 	2.1 加载使用，交叉相邻 2 ～  3条 load-use 以消除
                            | #		mrmovq (%rdi), %rcx # val
                            | #    		mrmovq 0x8(%rdi), %r9
                            | #    		rmmovq %rcx, (%rsi)
                            | #    		rmmovq %r9, 0x8(%rsi)
                            | #    		andq %rcx, %rcx
                            | #    		jle nopsX1
                            | #    		iaddq 0x1, %rax # cnt + 1
                            | #		nopsX1:
                            | #    		andq %r9, %r9
                            | #    		jle nopsX2
                            | #    		iaddq 0x1, %rax # cnt + 1
                            | #		nopsX2:
                            | #	然而实际上在ncopy中所有的load-use中use都是只读不写，在 pipe-full中加入 mValM-eValA 的转发，彻底消除 mrmove - rmmovq 中的气泡
                            | #	L = 5 + 3 / n
                            | #
                            | #	2.2 分支预测，使用cmove消除，然而cmove并没有提高性能也没有减小文件大小
                            | # 3. Cf 优化
                            | #	3.1 使用 iaddq
                            | #	3.2 使用 树状结构处理边界条件, 考虑一次op可以同时使jl,je,jg工作，充分利用每次op的信息，因而有以下两种优化（未修改forward）
                            | #		3.2.1
                            | #    			iaddq 0xfffffffffffffff6, %rdx
                            | #    			jge loopX
                            | #    			irmovq 0x1, %r10
                            | #    			andq %rdx, %r10
                            | #    			jne LO
                            | #	    		iaddq 0x8, %rdx
                            | #    			jl Done
                            | #    			je L2
                            | #    			iaddq 0xfffffffffffffffc, %rdx
                            | #    			jl L4
                            | #    			je L6
                            | #    			jg L8
                            | #			LO:
                            | #    			mrmovq (%rdi), %r9 # val
                            | #    			iaddq 0x8, %rdi
                            | #			rmmovq %r9, (%rsi)
                            | #			iaddq 0x8, %rsi
                            | #			andq %r9, %r9
                            | #			jle nopsO
                            | #			iaddq 0x1, %rax # cnt + 1
                            | #			nopsO:
                            | #			iaddq 0x7, %rdx
                            | #			jl Done
                            | #			je L2
                            | #
                            | #			iaddq 0xfffffffffffffffc, %rdx
                            | #			jl L4
                            | #			je L6
                            | #			L8:
                            | #			mrmovq 0x38(%rdi), %rcx
                            | #			mrmovq 0x30(%rdi), %r9
                            | #			rmmovq %rcx, 0x38(%rsi)
                            | #			rmmovq %r9, 0x30(%rsi)
                            | #			andq %rcx, %rcx
                            | #			jle nops8
                            | #			iaddq 0x1, %rax # cnt + 1
                            | #			nops8:
                            | #			andq %r9, %r9
                            | #			jle nops7
                            | #			iaddq 0x1, %rax # cnt + 1
                            | #			nops7:
                            | #			L6:
                            | #			mrmovq 0x28(%rdi), %rcx # val
                            | #			mrmovq 0x20(%rdi), %r9 # val
                            | #			rmmovq %rcx, 0x28(%rsi)
                            | #			rmmovq %r9, 0x20(%rsi)
                            | #			andq %rcx, %rcx
                            | #			jle nops6
                            | #			iaddq 0x1, %rax # cnt + 1
                            | #			nops6:
                            | #			andq %r9, %r9
                            | #			jle nops5
                            | #			iaddq 0x1, %rax # cnt + 1
                            | #			nops5:
                            | #			L4:
                            | #			mrmovq 0x18(%rdi), %rcx # val
                            | #			mrmovq 0x10(%rdi), %r9 # val
                            | #			rmmovq %rcx, 0x18(%rsi)
                            | #			rmmovq %r9, 0x10(%rsi)
                            | #			andq %rcx, %rcx
                            | #			jle nops4
                            | #			iaddq 0x1, %rax # cnt + 1
                            | #			nops4:
                            | #			andq %r9, %r9
                            | #			jle nops3
                            | #			iaddq 0x1, %rax # cnt + 1
                            | #			nops3:
                            | #			L2:
                            | #			mrmovq 0x8(%rdi), %rcx # val
                            | #			mrmovq (%rdi), %r9 # val
                            | #			rmmovq %rcx, 0x8(%rsi)
                            | #			rmmovq %r9, (%rsi)
                            | #			andq %rcx, %rcx
                            | #			jle nops2
                            | #			iaddq 0x1, %rax # cnt + 1
                            | #			nops2:
                            | #			andq %r9, %r9
                            | #			jle nops1
                            | #			iaddq 0x1, %rax # cnt + 1
                            | #			nops1:
                            | #		3.2.2 即目前使用的结构
                            | #	3.2.1分奇数偶数处理，受限于文件大小，效果不佳，3.2.2使用优先 n=1, n=2, n=3的树状结构，在不使用forward的情况下能达到 7.73
                            | #	3.3 优化n较小时的情况
                            | #		观察 CPE发现，当n较大时往往CPE能小于7.5甚至7，而n<8时CPE往往非常高，因而需要在不影响 L的情况下继续优化 Cf
                            | #		3.3.1 循环旁路
                            | #		A:
                            | #			jmp compare
                            | #				Loop
                            | #			compare:
                            | #    			iaddq 0xfffffffffffffff6, %rdx
                            | #    			jge loopX
                            | #		B:
                            | #			iaddq 0xfffffffffffffff6, %rdx
                            | #			jl loopend
                            | #				Loop
                            | #			compare:
                            | #    			iaddq 0xfffffffffffffff6, %rdx
                            | #    			jge loopX
                            | #			loopend:
                            | #		当len < n时，A需要 5 cycles，而 B 只需要 2 cycles,而len>n时，相差的3cycle又能被更大的n稀释
                            | #		3.3.2 树的继续优化
                            | #			3.3.2.1 优先jl以利用分支预测减小n较小时 CPE
                            | #			3.3.2.1 合理排布以节省空间
                            | ###########################################################################################
                            | #       Average CPE: 7.48
                            | #       Size: 999 bytes
                            | 
0x032: c0f2f6ffffffffffffff |     iaddq 0xfffffffffffffff6, %rdx
0x03c: 720602000000000000   |     jl loopend
                            | 
                            | 
0x045:                      | loopX:
0x045: 50170000000000000000 |     mrmovq (%rdi), %rcx # val
0x04f: 50970800000000000000 |     mrmovq 0x8(%rdi), %r9
0x059: 40160000000000000000 |     rmmovq %rcx, (%rsi)
0x063: 40960800000000000000 |     rmmovq %r9, 0x8(%rsi)
0x06d: 6211                 |     andq %rcx, %rcx
0x06f: 718200000000000000   |     jle nopsX1
0x078: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x082:                      | nopsX1:
0x082: 6299                 |     andq %r9, %r9
0x084: 719700000000000000   |     jle nopsX2
0x08d: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x097:                      | nopsX2:
                            | 
                            | 
0x097: 50171000000000000000 |     mrmovq 0x10(%rdi), %rcx # val
0x0a1: 50971800000000000000 |     mrmovq 0x18(%rdi), %r9 # val
0x0ab: 40161000000000000000 |     rmmovq %rcx, 0x10(%rsi)
0x0b5: 40961800000000000000 |     rmmovq %r9, 0x18(%rsi)
0x0bf: 6211                 |     andq %rcx, %rcx
0x0c1: 71d400000000000000   |     jle nopsX3
0x0ca: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x0d4:                      | nopsX3:
0x0d4: 6299                 |     andq %r9, %r9
0x0d6: 71e900000000000000   |     jle nopsX4
0x0df: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x0e9:                      | nopsX4:
                            | 
0x0e9: 50172000000000000000 |     mrmovq 0x20(%rdi), %rcx # val
0x0f3: 50972800000000000000 |     mrmovq 0x28(%rdi), %r9 # val
0x0fd: 40162000000000000000 |     rmmovq %rcx, 0x20(%rsi)
0x107: 40962800000000000000 |     rmmovq %r9, 0x28(%rsi)
0x111: 6211                 |     andq %rcx, %rcx
0x113: 712601000000000000   |     jle nopsX5
0x11c: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x126:                      | nopsX5:
0x126: 6299                 |     andq %r9, %r9
0x128: 713b01000000000000   |     jle nopsX6
0x131: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x13b:                      | nopsX6:
                            | 
0x13b: 50173000000000000000 |     mrmovq 0x30(%rdi), %rcx # val
0x145: 50973800000000000000 |     mrmovq 0x38(%rdi), %r9 # val
0x14f: 40163000000000000000 |     rmmovq %rcx, 0x30(%rsi)
0x159: 40963800000000000000 |     rmmovq %r9, 0x38(%rsi)
0x163: 6211                 |     andq %rcx, %rcx
0x165: 717801000000000000   |     jle nopsX7
0x16e: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x178:                      | nopsX7:
0x178: 6299                 |     andq %r9, %r9
0x17a: 718d01000000000000   |     jle nopsX8
0x183: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x18d:                      | nopsX8:
0x18d: 50174000000000000000 |     mrmovq 0x40(%rdi), %rcx # val
0x197: 50974800000000000000 |     mrmovq 0x48(%rdi), %r9 # val
0x1a1: 40164000000000000000 |     rmmovq %rcx, 0x40(%rsi)
0x1ab: 40964800000000000000 |     rmmovq %r9, 0x48(%rsi)
0x1b5: 6211                 |     andq %rcx, %rcx
0x1b7: 71ca01000000000000   |     jle nopsX9
0x1c0: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x1ca:                      | nopsX9:
0x1ca: 6299                 |     andq %r9, %r9
0x1cc: 71df01000000000000   |     jle nopsXA
0x1d5: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x1df:                      | nopsXA:
0x1df: c0f75000000000000000 |     iaddq 0x50, %rdi
0x1e9: c0f65000000000000000 |     iaddq 0x50, %rsi
                            | 
0x1f3:                      | compare:
0x1f3: c0f2f6ffffffffffffff |     iaddq 0xfffffffffffffff6, %rdx
0x1fd: 754500000000000000   |     jge loopX
                            | 
0x206:                      | loopend:
0x206: c0f20700000000000000 |     iaddq 0x7, %rdx
0x210: 726c02000000000000   |     jl N3L
0x219: 762b02000000000000   |     jg N3R
0x222: 739b03000000000000   |     je L3B
0x22b:                      | N3R:
0x22b: c0f2fdffffffffffffff |     iaddq -3, %rdx
0x235: 728902000000000000   |     jl N6L
0x23e: 732003000000000000   |     je L6B
0x247:                      | N6R:
0x247: c0f2feffffffffffffff |     iaddq -2, %rdx
0x251: 72f702000000000000   |     jl L7B
0x25a: 73ce02000000000000   |     je L8B
0x263: 70a502000000000000   |     jmp L9B
                            | 
0x26c:                      | N3L:
0x26c: c0f20200000000000000 |     iaddq 2, %rdx
0x276: 73ed03000000000000   |     je L1B
0x27f: 76c403000000000000   |     jg L2B
0x288: 90                   |     ret
0x289:                      | N6L:
0x289: c0f20100000000000000 |     iaddq 1,%rdx
0x293: 727203000000000000   |     jl L4B
0x29c: 734903000000000000   |     je L5B
                            | 
0x2a5:                      | L9B:
0x2a5: 50974000000000000000 |     mrmovq 0x40(%rdi), %r9
0x2af: 40964000000000000000 |     rmmovq %r9, 0x40(%rsi)
0x2b9: 6299                 |     andq %r9, %r9
0x2bb: 71ce02000000000000   |     jle nops9
0x2c4: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x2ce:                      | nops9:
0x2ce:                      | L8B:
0x2ce: 50173800000000000000 |     mrmovq 0x38(%rdi), %rcx
0x2d8: 40163800000000000000 |     rmmovq %rcx, 0x38(%rsi)
0x2e2: 6211                 |     andq %rcx, %rcx
0x2e4: 71f702000000000000   |     jle nops8
0x2ed: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x2f7:                      | nops8:
                            | 
0x2f7:                      | L7B:
0x2f7: 50973000000000000000 |     mrmovq 0x30(%rdi), %r9
0x301: 40963000000000000000 |     rmmovq %r9, 0x30(%rsi)
0x30b: 6299                 |     andq %r9, %r9
0x30d: 712003000000000000   |     jle nops7
0x316: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x320:                      | nops7:
0x320:                      | L6B:
0x320: 50172800000000000000 |     mrmovq 0x28(%rdi), %rcx
0x32a: 40162800000000000000 |     rmmovq %rcx, 0x28(%rsi)
0x334: 6211                 |     andq %rcx, %rcx
0x336: 714903000000000000   |     jle nops6
0x33f: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x349:                      | nops6:
0x349:                      | L5B:
0x349: 50972000000000000000 |     mrmovq 0x20(%rdi), %r9
0x353: 40962000000000000000 |     rmmovq %r9, 0x20(%rsi)
0x35d: 6299                 |     andq %r9, %r9
0x35f: 717203000000000000   |     jle nops5
0x368: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x372:                      | nops5:
0x372:                      | L4B:
0x372: 50171800000000000000 |     mrmovq 0x18(%rdi), %rcx
0x37c: 40161800000000000000 |     rmmovq %rcx, 0x18(%rsi)
0x386: 6211                 |     andq %rcx, %rcx
0x388: 719b03000000000000   |     jle nops4
0x391: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x39b:                      | nops4:
0x39b:                      | L3B:
0x39b: 50971000000000000000 |     mrmovq 0x10(%rdi), %r9
0x3a5: 40961000000000000000 |     rmmovq %r9, 0x10(%rsi)
0x3af: 6299                 |     andq %r9, %r9
0x3b1: 71c403000000000000   |     jle nops3
0x3ba: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x3c4:                      | nops3:
0x3c4:                      | L2B:
0x3c4: 50170800000000000000 |     mrmovq 0x8(%rdi), %rcx
0x3ce: 40160800000000000000 |     rmmovq %rcx, 0x8(%rsi)
0x3d8: 6211                 |     andq %rcx, %rcx
0x3da: 71ed03000000000000   |     jle nops2
0x3e3: c0f00100000000000000 |     iaddq 0x1, %rax # cnt + 1
0x3ed:                      | nops2:
0x3ed:                      | L1B:
0x3ed: 50970000000000000000 |     mrmovq (%rdi), %r9
0x3f7: 40960000000000000000 |     rmmovq %r9, (%rsi)
0x401: 6299                 |     andq %r9, %r9
0x403: 711604000000000000   |     jle nops1
0x40c: c0f00100000000000000 |     iaddq 0x1, %rax
0x416:                      | nops1:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x416:                      | Done:
0x416: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x417:                      | End:
                            | #/* end ncopy-ys */
0x417:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x418:                      | 	.align 8
0x418:                      | src:
0x418: 0100000000000000     | 	.quad 1
0x420: feffffffffffffff     | 	.quad -2
0x428: 0300000000000000     | 	.quad 3
0x430: fcffffffffffffff     | 	.quad -4
0x438: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x440:                      | 	.align 16
0x440:                      | Predest:
0x440: fadebc0000000000     | 	.quad 0xbcdefa
0x448:                      | dest:
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468:                      | Postdest:
0x468: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x470:                      | .align 8
                            | # Run time stack
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
0x4e8: 0000000000000000     | 	.quad 0
                            | 
0x4f0:                      | Stack:
